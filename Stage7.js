class Stage7 {
    constructor(game) {
        this.game = game;
        this.drone = game.drone;
        this.drone.angle = 0;  // Reset any previous angle
        this.learningStep = 0;  // Track the user's progress
        this.startMessage = "Welcome to Stage 7! Here you will learn how the drone moves by tilting and controlling the forces of the two motors.";
    }

    start() {
        this.showInstructions();
    }

    showInstructions() {
        const infoDiv = document.getElementById('info');
        infoDiv.innerHTML = this.startMessage + "<br><br>" + 
            "The drone has two motors. By changing the thrust on each motor, we can tilt the drone and move it in different directions.<br><br>" +
            "The forces generated by the motors can be broken down into two components:<br>" +
            "<strong>1. Vertical Component</strong> (F_y): Helps the drone hover.<br>" +
            "<strong>2. Horizontal Component</strong> (F_x): Controls the drone's movement left and right.<br><br>" +
            "Next, we'll visualize how these forces break down using a triangle!";
        
        document.getElementById('startButton').style.visibility = 'hidden';
        document.getElementById('nextStepButton').style.visibility = 'visible';
        document.getElementById('nextStepButton').innerText = 'Show Triangle';
        document.getElementById('nextStepButton').onclick = () => this.showForceBreakdown();
    }

    showForceBreakdown() {
        // Clear the nextStepButton since we don't need it anymore
        document.getElementById('nextStepButton').style.visibility = 'hidden';

        // Draw the triangle on the canvas
        this.drawTriangle();

        // After showing the triangle, display the motor control sliders
        this.displaySliders();
    }

    drawTriangle() {
        const ctx = this.game.ctx;

        // Clear the canvas before drawing
        ctx.clearRect(0, 0, this.game.canvas.width, this.game.canvas.height);

        // Set up triangle points and force vectors
        const baseX = 400;
        const baseY = 200;
        const forceLength = 150;  // Length of the hypotenuse (representing total thrust)
        const angle = Math.PI / 6;  // 30 degrees for demonstration

        // Calculate the x and y components based on the angle
        const fx = forceLength * Math.cos(angle);
        const fy = forceLength * Math.sin(angle);

        // Draw the triangle (representing thrust and components)
        ctx.strokeStyle = '#000000';
        ctx.lineWidth = 2;

        // Draw the hypotenuse (thrust)
        ctx.beginPath();
        ctx.moveTo(baseX, baseY);  // Base point
        ctx.lineTo(baseX + fx, baseY - fy);  // End point of the hypotenuse
        ctx.stroke();

        // Draw the vertical component (F_y)
        ctx.beginPath();
        ctx.moveTo(baseX + fx, baseY - fy);  // Start from the hypotenuse end point
        ctx.lineTo(baseX + fx, baseY);  // Vertical line down to the base
        ctx.stroke();

        // Draw the horizontal component (F_x)
        ctx.beginPath();
        ctx.moveTo(baseX, baseY);  // Start from the base
        ctx.lineTo(baseX + fx, baseY);  // Horizontal line along the base
        ctx.stroke();

        // Label the forces
        ctx.fillStyle = '#000000';
        ctx.font = '18px Arial';
        ctx.fillText('F', baseX + fx / 2, baseY - fy / 2);  // Label for the hypotenuse
        ctx.fillText('F_x', baseX + fx / 2, baseY + 20);  // Label for the horizontal component
        ctx.fillText('F_y', baseX + fx + 10, baseY - fy / 2);  // Label for the vertical component
    }

    displaySliders() {
        // Show motor thrust control sliders
        const inputContainer = document.getElementById('inputContainer');
        inputContainer.style.visibility = 'visible';

        document.getElementById('submitForcesButton').onclick = () => this.applyForces();
    }

    applyForces() {
        // Get values from the sliders
        const motor1Thrust = parseFloat(document.getElementById('motor1Thrust').value);
        const motor2Thrust = parseFloat(document.getElementById('motor2Thrust').value);

        // Calculate total thrust and angle
        const totalThrust = motor1Thrust + motor2Thrust;
        const thrustDifference = motor1Thrust - motor2Thrust;
        const angle = Math.atan(thrustDifference / totalThrust);  // Calculate tilt angle based on thrust difference

        // Update drone properties
        this.drone.vx = totalThrust * Math.sin(angle);  // Horizontal force
        this.drone.vy = totalThrust * Math.cos(angle);  // Vertical force
        this.drone.angle = angle;  // Set the drone's angle based on the motor thrust difference

        // Update the game and show results
        this.updateDrone();
    }

    updateDrone() {
        const infoDiv = document.getElementById('info');
        infoDiv.innerHTML = "Drone Tilt Angle: " + (this.drone.angle * (180 / Math.PI)).toFixed(2) + "Â°<br>" +
            "Horizontal Force (F_x): " + this.drone.vx.toFixed(2) + "<br>" +
            "Vertical Force (F_y): " + this.drone.vy.toFixed(2) + "<br><br>" +
            "Try adjusting the motor forces again!";
    }

    cleanup() {
        document.getElementById('inputContainer').style.visibility = 'hidden';
    }
}

// Make sure to load the stage
document.addEventListener('DOMContentLoaded', () => {
    const game = window.game;
    document.getElementById('stage7Link').addEventListener('click', () => {
        game.startStage(Stage7);
    });
});
